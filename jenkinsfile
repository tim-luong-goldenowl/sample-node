pipeline {
    agent none

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    stages {
        // stage('Unit Test') {
        //     agent {
        //         docker {
        //             image 'node:lts-bullseye-slim'
        //             args '-u 0:0 -v /tmp:/root/.cache'
        //         }
        //     }

        //     steps {
        //         sh 'npm install'
        //         sh 'npm test'
        //     }
        // }

        stage("Docker Build/Push Iamge") {
            agent any
            
            steps {
                script {
                    def building_image_name = "${IMAGE_BASE_NAME}:${GIT_BRANCH.tokenize('/').pop()}-${GIT_COMMIT.substring(0,7)}"
                    env.building_image_name = building_image_name
                }

                sh "docker build -t ${env.building_image_name} . "

                withCredentials([usernamePassword(credentialsId: 'docker hub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh "docker push ${env.building_image_name}"
                }

                //clean to save disk
                sh "docker image rm ${env.building_image_name}"
            }
        }

        stage("Terraform Deploy") {
            agent {
                docker {
                    image "hashicorp/terraform:1.4"
                    args  "--entrypoint='' -v /Users/goldenowl/Documents/jenkins/data/workspace/sample_node/:/workpace -w /workpace -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
                }
            }

            steps {
                sh 'terraform init'
                sh "terraform apply -var='IMAGE_NAME=${env.building_image_name}' -auto-approve"
            }
        }

        stage('Notify to Slack') {
            agent any

            steps {
                slackSend message: "Your ${BRANCH_NAME} has been deployed to ${env.instance_dns}"
            }
        }
    }
}